{
  "api/ElseForty.splineplus.api.BranchAPI.html": {
    "href": "api/ElseForty.splineplus.api.BranchAPI.html",
    "title": "Class BranchAPI | Spline Plus documentation",
    "keywords": "Class BranchAPI Provides methods for interacting with branches of a SplinePlus object. Inheritance object BranchAPI Namespace: ElseForty.splineplus.api Assembly: cs.temp.dll.dll Syntax public class BranchAPI Methods Add_Node_At_Index(SplinePlus, int, NodeModel, int, bool, bool) Adds a new node at the specified index within the node list of the specified branch in the SplinePlus object. Declaration public static void Add_Node_At_Index(SplinePlus splinePlus, int branchKey, NodeModel nodeToAdd, int index, bool doSelect = true, bool autoSmoothHandles = true) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. int branchKey The key identifying the branch to which the node will be added. NodeModel nodeToAdd The NodeModel representing the node to add. int index The index at which the node will be inserted within the branch's node list. bool doSelect bool autoSmoothHandles Add_Node_Beginning(SplinePlus, int, NodeModel, bool, bool) Adds a new node at the beginning of the specified branch in the SplinePlus object. Declaration public static void Add_Node_Beginning(SplinePlus splinePlus, int branchKey, NodeModel nodeToAdd, bool doSelect = true, bool autoSmoothHandles = true) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. int branchKey The key identifying the branch to which the node will be added. NodeModel nodeToAdd The NodeModel representing the node to add. bool doSelect bool autoSmoothHandles Add_Node_End(SplinePlus, int, NodeModel, bool, bool) Adds a new node at the end of the specified branch in the SplinePlus object. Declaration public static void Add_Node_End(SplinePlus splinePlus, int branchKey, NodeModel nodeToAdd, bool doSelect = true, bool autoSmoothHandles = true) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. int branchKey The key identifying the branch to which the node will be added. NodeModel nodeToAdd The NodeModel representing the node to add. bool doSelect bool autoSmoothHandles Add_Nodes_At_Index(SplinePlus, int, NodeModel[], int, bool, bool) Adds an array of nodes at a specified index in a branch of the SplinePlus object. Declaration public static void Add_Nodes_At_Index(SplinePlus splinePlus, int branchKey, NodeModel[] nodesToAdd, int index, bool doSelect = true, bool autoSmoothHandles = true) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object to which nodes will be added. int branchKey The key of the branch where nodes will be added. NodeModel[] nodesToAdd The array of NodeModel objects to add to the branch. int index The index at which the nodes should be inserted. bool doSelect (Optional) If set to true, the last node added will be selected. Default is true. bool autoSmoothHandles (Optional) If set to true, handles for the nodes will be automatically smoothed. Default is true. Remarks If the branchKey does not exist within the SplinePlus object, a new branch will be created. Nodes that are already present in the branch will be ignored. Examples Here is an example of how to use Add_Nodes_At_Index: NodeModel[] nodes = new NodeModel[] { new NodeModel(), new NodeModel() }; SplinePlus mySplinePlus = new SplinePlus(); int myBranchKey = 0; int insertIndex = 1; Add_Nodes_At_Index(mySplinePlus, myBranchKey, nodes, insertIndex); BreakAt(SplinePlus, NodeModel) Breaks a spline branch at the specified node, creating a new branch starting from that node. Declaration public static void BreakAt(SplinePlus splinePlus, NodeModel node) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. NodeModel node The node at which to break the spline branch. Create(SplinePlus) Creates a new branch in the specified SplinePlus object. Declaration public static int Create(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object to create the branch in. Returns Type Description int The key of the newly created branch. Delete(SplinePlus, int) Deletes the specified branch from the SplinePlus object. Declaration public static void Delete(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. int branchKey The key identifying the branch to be deleted. Diffuse(SplinePlus, int) Diffuses shared nodes in a specific branch of a SplinePlus object. Declaration public static void Diffuse(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the branch with shared nodes to be diffused. int branchKey An integer representing the key of the branch to be processed. FlipHandles(SplinePlus, int, BranchDirection_Enum) Declaration public static void FlipHandles(SplinePlus splinePlus, int branchKey, BranchDirection_Enum branchDirection) Parameters Type Name Description SplinePlus splinePlus int branchKey BranchDirection_Enum branchDirection Get_Direction(SplinePlus, int) Declaration public static BranchDirection_Enum Get_Direction(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus int branchKey Returns Type Description BranchDirection_Enum Get_Length(SplinePlus, int) Calculates and returns the length of a branch in a SplinePlus object. Declaration public static float Get_Length(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the branch. int branchKey An integer representing the key of the branch. Returns Type Description float The length of the specified branch as a floating-point number. Get_Nodes(SplinePlus, int) Retrieves the list of nodes belonging to the specified branch in the SplinePlus object. Declaration public static List<NodeModel> Get_Nodes(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. int branchKey The key identifying the branch whose nodes will be retrieved. Returns Type Description List<NodeModel> The list of NodeModel objects representing the nodes of the specified branch, or null if the branch does not exist. Get_Normals(SplinePlus, int) Retrieves the normals of a branch in a SplinePlus object. Declaration public static List<Vector3> Get_Normals(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the branch. int branchKey An integer representing the key of the branch. Returns Type Description List<Vector3> A list of Vector3 objects representing the normals of the specified branch. Returns null if the branch with the specified key is not found. Get_Tangents(SplinePlus, int) Retrieves the tangents of a branch in a SplinePlus object. Declaration public static List<Vector3> Get_Tangents(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the branch. int branchKey An integer representing the key of the branch. Returns Type Description List<Vector3> A list of Vector3 objects representing the tangents of the specified branch. Returns null if the branch with the specified key is not found. Get_Vertices(SplinePlus, int) Retrieves the vertices of a branch in a SplinePlus object. Declaration public static List<Vector3> Get_Vertices(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the branch. int branchKey An integer representing the key of the branch. Returns Type Description List<Vector3> A list of Vector3 objects representing the vertices of the specified branch. Returns null if the branch with the specified key is not found. IsReversed(SplinePlus, int) Reverses the order of nodes in a specific branch of a SplinePlus object and flips the handles for each node. Declaration public static void IsReversed(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the branch to be reversed. int branchKey An integer representing the key of the branch to be reversed. Merge(SplinePlus, int, int) Merges two branches of a SplinePlus object into one branch. Declaration public static int Merge(SplinePlus splinePlus, int branchKey1, int branchKey2) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the branches to be merged. int branchKey1 An integer representing the key of the first branch to be merged. int branchKey2 An integer representing the key of the second branch to be merged. Returns Type Description int An integer representing the key of the merged branch. Selected(SplinePlus) Retrieves the currently selected branch from the specified SplinePlus object. If no branch is selected, creates a new branch and sets it as selected. Declaration public static BranchModel Selected(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. Returns Type Description BranchModel The currently selected branch, or null if no branch is found. Set_Direction(SplinePlus, int, BranchDirection_Enum) Declaration public static void Set_Direction(SplinePlus splinePlus, int branchKey, BranchDirection_Enum branchDirection) Parameters Type Name Description SplinePlus splinePlus int branchKey BranchDirection_Enum branchDirection Update(SplinePlus, int) Updates the geometry and properties of a specific branch of the spline. Declaration public static void Update(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. int branchKey The key identifying the branch to update."
  },
  "api/ElseForty.splineplus.api.html": {
    "href": "api/ElseForty.splineplus.api.html",
    "title": "Namespace ElseForty.splineplus.api | Spline Plus documentation",
    "keywords": "Namespace ElseForty.splineplus.api Classes BranchAPI Provides methods for interacting with branches of a SplinePlus object. NodeAPI Provides methods for manipulating nodes in a SplinePlus object, including retrieving selected nodes, creating new nodes, updating node positions, setting node positions, and chamfering nodes. ProjectionAPI Provides methods for updating the positions of vertices and nodes along spline branches by raycasting onto surfaces below, retrieving and setting projection properties such as raycast length, offset, debug ray visibility, and preservation of normals. SplinePlusAPI Provides a set of methods for manipulating and interacting with SplinePlus objects, including adding modifiers, updating, creating, retrieving branches and nodes, setting smoothness and reference axis, welding nodes, serializing, and deserializing data."
  },
  "api/ElseForty.splineplus.api.NodeAPI.html": {
    "href": "api/ElseForty.splineplus.api.NodeAPI.html",
    "title": "Class NodeAPI | Spline Plus documentation",
    "keywords": "Class NodeAPI Provides methods for manipulating nodes in a SplinePlus object, including retrieving selected nodes, creating new nodes, updating node positions, setting node positions, and chamfering nodes. Inheritance object NodeAPI Namespace: ElseForty.splineplus.api Assembly: cs.temp.dll.dll Syntax public class NodeAPI Methods Chamfer(SplinePlus, NodeModel, float) Applies a chamfer effect to the specified node in the SplinePlus object, creating new nodes and branches as needed. Declaration public static void Chamfer(SplinePlus splinePlus, NodeModel node, float value) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. NodeModel node The node to apply the chamfer effect to. float value The value determining the extent of the chamfer effect. Collapse(SplinePlus, List<NodeModel>) Connects the origin node with the target node in the specified spline, connecting their branches if necessary. Declaration public static void Collapse(SplinePlus splinePlus, List<NodeModel> nodes) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. List<NodeModel> nodes Compound(SplinePlus, NodeModel) Compounds the specified node with the connected branches, merging them into a single branch. Declaration public static void Compound(SplinePlus splinePlus, NodeModel node) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. NodeModel node The node to be compounded. Connect(SplinePlus, NodeModel, NodeModel) Declaration public static int Connect(SplinePlus splinePlus, NodeModel node1, NodeModel node2) Parameters Type Name Description SplinePlus splinePlus NodeModel node1 NodeModel node2 Returns Type Description int Create_At_Distance(SplinePlus, int, float) Creates a new node at a specific distance along the specified branch in the given SplinePlus object. Declaration public static NodeModel Create_At_Distance(SplinePlus splinePlus, int branchKey, float distance) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the branch. int branchKey The key of the branch on which to create the node. float distance The distance along the branch where the new node will be created. Returns Type Description NodeModel The newly created NodeModel object. Create(SplinePlus, Vector3, Vector3, Vector3, NodeType_Enum) Creates a new node in the spline. Declaration public static NodeModel Create(SplinePlus splinePlus, Vector3 nodeWorldPos, Vector3 firstHandleLocalPos, Vector3 secondHandleLocalPos, NodeType_Enum nodeType = null) Parameters Type Name Description SplinePlus splinePlus The SplinePlus component to which the node belongs. Vector3 nodeWorldPos The world position of the node. Vector3 firstHandleLocalPos The local position of the first handle relative to the node. Vector3 secondHandleLocalPos The local position of the second handle relative to the node. NodeType_Enum nodeType The type of the node. Default is NodeType_Enum.Smooth. Returns Type Description NodeModel The created NodeModel instance. Create(SplinePlus, Vector3) Creates a new node in the specified spline. Declaration public static NodeModel Create(SplinePlus splinePlus, Vector3 nodeWorldPos) Parameters Type Name Description SplinePlus splinePlus The spline to create the node in. Vector3 nodeWorldPos The world position of the node. Returns Type Description NodeModel The created node. Delete(SplinePlus, NodeModel) Deletes the specified node from the spline and removes it from all connected branches. Declaration public static void Delete(SplinePlus splinePlus, NodeModel nodeToRemove) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. NodeModel nodeToRemove The node to be deleted. Diffuse(SplinePlus, NodeModel) Diffuses the specified node in the spline, creating a duplicate node on each connected branch and connecting them. Declaration public static List<NodeModel> Diffuse(SplinePlus splinePlus, NodeModel node) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the spline. NodeModel node The node to be diffused. Returns Type Description List<NodeModel> Duplicate(SplinePlus, NodeModel, bool) Declaration public static NodeModel Duplicate(SplinePlus splinePlus, NodeModel originNode, bool copySharedNodeData = false) Parameters Type Name Description SplinePlus splinePlus NodeModel originNode bool copySharedNodeData Returns Type Description NodeModel FlipHandles(NodeModel) Creates a new node with flipped handles based on the provided node, doesn't change the node provided Declaration public static NodeModel FlipHandles(NodeModel node) Parameters Type Name Description NodeModel node The node whose handles will be flipped. Returns Type Description NodeModel A new NodeModel object with flipped handles. FlipHandles(SplinePlus, int, int) Flips the handles of a node at the specified index in the branch identified by the given key. Declaration public static void FlipHandles(SplinePlus splinePlus, int branchKey, int NodeIndex) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the branch. int branchKey The key of the branch containing the node. int NodeIndex The index of the node within the branch. Get_Connected_Branches(NodeModel) Retrieves a list of branch keys connected to the specified node. Declaration public static List<int> Get_Connected_Branches(NodeModel node) Parameters Type Name Description NodeModel node The node to retrieve connected branches for. Returns Type Description List<int> A list of branch keys connected to the node. Get_Handle_1_Position(NodeModel, SpaceType_Enum) Gets the position of the first handle (point1) of the specified node based on the provided space type. Declaration public static Vector3 Get_Handle_1_Position(NodeModel node, SpaceType_Enum spaceType) Parameters Type Name Description NodeModel node The NodeModel object from which to get the first handle's position. SpaceType_Enum spaceType The space in which the position is requested (local or world). Returns Type Description Vector3 The position of the first handle (point1) of the node. Get_Handle_2_Position(NodeModel, SpaceType_Enum) Gets the position of the second handle (point2) of the specified node based on the provided space type. Declaration public static Vector3 Get_Handle_2_Position(NodeModel node, SpaceType_Enum spaceType) Parameters Type Name Description NodeModel node The NodeModel object from which to get the second handle's position. SpaceType_Enum spaceType The space in which the position is requested (local or world). Returns Type Description Vector3 The position of the second handle (point2) of the node. Get_Normal(NodeModel) Gets the normal angle of the specified node. Declaration public static float Get_Normal(NodeModel node) Parameters Type Name Description NodeModel node The node to get the normal angle from. Returns Type Description float The normal angle value of the node. Get_Position(NodeModel, SpaceType_Enum) Gets the position of the specified node based on the provided space type. Declaration public static Vector3 Get_Position(NodeModel node, SpaceType_Enum spaceType) Parameters Type Name Description NodeModel node The NodeModel object from which to get the position. SpaceType_Enum spaceType The space in which the position is requested (local or world). Returns Type Description Vector3 The position of the node. Get_Scale(NodeModel) Gets the scale of the specified node. Declaration public static float Get_Scale(NodeModel node) Parameters Type Name Description NodeModel node The node to get the scale from. Returns Type Description float The scale of the node. Get_Speed(NodeModel) Gets the speed of the specified node. Declaration public static float Get_Speed(NodeModel node) Parameters Type Name Description NodeModel node The node to get the speed from. Returns Type Description float The speed of the node. Get_Type(NodeModel) Gets the type of the specified node. Declaration public static NodeType_Enum Get_Type(NodeModel node) Parameters Type Name Description NodeModel node The node whose type will be retrieved. Returns Type Description NodeType_Enum The type of the node. Is_Shared(NodeModel) Checks if the specified node is shared among multiple branches. Declaration public static bool Is_Shared(NodeModel node) Parameters Type Name Description NodeModel node The node to check. Returns Type Description bool True if the node is shared among multiple branches, false otherwise. Set_Handle_Position(NodeModel, Vector3, HandleType_Enum, SpaceType_Enum) Sets the position of a handle on a node. Declaration public static void Set_Handle_Position(NodeModel node, Vector3 position, HandleType_Enum handleType, SpaceType_Enum spaceType) Parameters Type Name Description NodeModel node The node to set the handle position on. Vector3 position The new position of the handle. HandleType_Enum handleType The type of handle to set the position for. SpaceType_Enum spaceType The coordinate space to use for setting the position. Set_Normal(SplinePlus, NodeModel, float) Sets the normal angle of the specified node and updates the connected branches' nodes accordingly. Declaration public static void Set_Normal(SplinePlus splinePlus, NodeModel node, float normalAngle) Parameters Type Name Description SplinePlus splinePlus The SplinePlus component. NodeModel node The node to set the normal angle for. float normalAngle The new normal angle value. Set_Scale(NodeModel, float) Sets the scale of the specified node. Declaration public static void Set_Scale(NodeModel node, float scale) Parameters Type Name Description NodeModel node The node whose scale will be set. float scale The scale value to set. Set_TargetSpeed(NodeModel, float) Sets the speed of movement for the specified node. Declaration public static void Set_TargetSpeed(NodeModel node, float speed) Parameters Type Name Description NodeModel node The node whose speed will be set. float speed The speed value to set. Set_Type(NodeModel, NodeType_Enum) Sets the type of the specified node. Declaration public static void Set_Type(NodeModel node, NodeType_Enum newNodeType) Parameters Type Name Description NodeModel node The node whose type will be set. NodeType_Enum newNodeType The new type for the node. Update(SplinePlus, NodeModel) Updates the branches connected to the specified node in the given SplinePlus object. Declaration public static void Update(SplinePlus splinePlus, NodeModel node) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the node and its connected branches. NodeModel node The node whose connected branches need to be updated."
  },
  "api/ElseForty.splineplus.api.ProjectionAPI.html": {
    "href": "api/ElseForty.splineplus.api.ProjectionAPI.html",
    "title": "Class ProjectionAPI | Spline Plus documentation",
    "keywords": "Class ProjectionAPI Provides methods for updating the positions of vertices and nodes along spline branches by raycasting onto surfaces below, retrieving and setting projection properties such as raycast length, offset, debug ray visibility, and preservation of normals. Inheritance object ProjectionAPI Namespace: ElseForty.splineplus.api Assembly: cs.temp.dll.dll Syntax public class ProjectionAPI Methods Get_Offset(SplinePlus) Gets the offset value used in raycasting for the specified SplinePlus object. Declaration public static float Get_Offset(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object to get the offset value for. Returns Type Description float The offset value used in raycasting. Get_PreserveNormals(SplinePlus) Gets the current preservation state of normals for the specified SplinePlus object. Declaration public static bool Get_PreserveNormals(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object to get the preservation state of normals from. Returns Type Description bool True if normals preservation is enabled, false otherwise. Get_Projection(SplinePlus) Declaration public static bool Get_Projection(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus Returns Type Description bool Get_RaycastLength(SplinePlus) Gets the length of raycasts used in the projection for the specified SplinePlus object. Declaration public static float Get_RaycastLength(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object to get the raycast length from. Returns Type Description float The length of raycasts used in the projection. Project_BranchNodes(SplinePlus, int) Declaration public static void Project_BranchNodes(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus int branchKey Set_Offset(SplinePlus, float) Sets the offset value used in raycasting for the specified SplinePlus object. Declaration public static void Set_Offset(SplinePlus splinePlus, float offset) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object to set the offset value for. float offset The offset value to set for raycasting. Set_PreserveNormals(SplinePlus, bool) Sets the preservation state of normals for the specified SplinePlus object. Declaration public static void Set_PreserveNormals(SplinePlus splinePlus, bool value) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object to set the preservation state of normals for. bool value The boolean value indicating whether to preserve normals. Set_Projection(SplinePlus, bool) Declaration public static void Set_Projection(SplinePlus splinePlus, bool isProjection) Parameters Type Name Description SplinePlus splinePlus bool isProjection Set_RaycastLength(SplinePlus, float) Sets the length of raycasts used in the projection for the specified SplinePlus object. Declaration public static void Set_RaycastLength(SplinePlus splinePlus, float length) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object to set the raycast length for. float length The length of raycasts to set."
  },
  "api/ElseForty.splineplus.api.SplinePlusAPI.html": {
    "href": "api/ElseForty.splineplus.api.SplinePlusAPI.html",
    "title": "Class SplinePlusAPI | Spline Plus documentation",
    "keywords": "Class SplinePlusAPI Provides a set of methods for manipulating and interacting with SplinePlus objects, including adding modifiers, updating, creating, retrieving branches and nodes, setting smoothness and reference axis, welding nodes, serializing, and deserializing data. Inheritance object SplinePlusAPI Namespace: ElseForty.splineplus.api Assembly: cs.temp.dll.dll Syntax public class SplinePlusAPI Methods Clear_Selection(SplinePlus) Declaration public static void Clear_Selection(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus Create(Vector3) Creates a new SplinePlus object at the specified position. Declaration public static SplinePlus Create(Vector3 position) Parameters Type Name Description Vector3 position The position at which the new SplinePlus object will be created. Returns Type Description SplinePlus The newly created SplinePlus object. Deserialize(SplinePlus, string) Deserializes the spline data from the specified file path and applies it to the given SplinePlus object. Declaration public static void Deserialize(SplinePlus splinePlus, string path) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object to deserialize the data into. string path The file path containing the serialized spline data. Get_Branches(SplinePlus) Retrieves a dictionary containing the branches of a SplinePlus object. Declaration public static Dictionary<int, BranchModel> Get_Branches(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object from which to retrieve the branches. Returns Type Description Dictionary<int, BranchModel> A dictionary where the keys represent the branch keys and the values represent the corresponding BranchModel objects. Returns null if the input SplinePlus object is null. Get_Closest__To_MousePosition(SplinePlus) Finds the closest spline distance to the current mouse position on the screen. Declaration public static (float closestDistanceOnBranch, int closestBranchKey) Get_Closest__To_MousePosition(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus component that contains the branches and vertices. Returns Type Description (float closestDistanceOnBranch, int closestBranchKey) A tuple containing the closest branch distance of the closest vertex and the key of the closest branch. Get_Nodes(SplinePlus) Retrieves all nodes in a SplinePlus object. Declaration public static List<NodeModel> Get_Nodes(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object from which to retrieve nodes. Returns Type Description List<NodeModel> A list of NodeModel objects representing all nodes in the specified SplinePlus object. Get_Reference_Axis(SplinePlus) Retrieves the reference axis of a SplinePlus object. Declaration public static RefAxis_Enum Get_Reference_Axis(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object from which to retrieve the reference axis. Returns Type Description RefAxis_Enum The reference axis of the specified SplinePlus object. Get_Selected_Branch(SplinePlus) Declaration public static int Get_Selected_Branch(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus Returns Type Description int Get_Shared_Nodes(SplinePlus) Retrieves all shared nodes in a SplinePlus object. Declaration public static List<NodeModel> Get_Shared_Nodes(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object from which to retrieve shared nodes. Returns Type Description List<NodeModel> A list of NodeModel objects representing all shared nodes in the specified SplinePlus object. Get_Smoothness(SplinePlus) Retrieves the smoothness value of a SplinePlus object. Declaration public static int Get_Smoothness(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object from which to retrieve the smoothness value. Returns Type Description int The smoothness value of the specified SplinePlus object. Get_SplineTransform(SplinePlus, BranchModel, float) Declaration public static SplineTransformModel Get_SplineTransform(SplinePlus splinePlus, BranchModel branch, float targetDist = 0) Parameters Type Name Description SplinePlus splinePlus BranchModel branch float targetDist Returns Type Description SplineTransformModel Get_SplineTransform(SplinePlus, int, float) Calculates the transformation (position and rotation) along a branch of a SplinePlus object at a specified distance. Declaration public static SplineTransformModel Get_SplineTransform(SplinePlus splinePlus, int branchKey, float targetDist = 0) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the branch. int branchKey The branch key of the branch for which to calculate the transformation. float targetDist The target distance along the branch at which to calculate the transformation. Default is 0. Returns Type Description SplineTransformModel A SplineTransformModel object containing the calculated position and rotation. Merge(SplinePlus, SplinePlus) Merges the spline branches from the source SplinePlus object into the target SplinePlus object. Declaration public static void Merge(SplinePlus source, SplinePlus target) Parameters Type Name Description SplinePlus source The source SplinePlus object from which to merge spline branches. SplinePlus target The target SplinePlus object into which the spline branches will be merged. Select_Branch(SplinePlus, int) Declaration public static void Select_Branch(SplinePlus splinePlus, int branchKey) Parameters Type Name Description SplinePlus splinePlus int branchKey Select_Node(SplinePlus, NodeModel) Declaration public static void Select_Node(SplinePlus splinePlus, NodeModel node) Parameters Type Name Description SplinePlus splinePlus NodeModel node Serializable(string, SplinePlus) Serializes the data of a SplinePlus object and saves it to a file. Declaration public static void Serializable(string path, SplinePlus splinePlus) Parameters Type Name Description string path The path where the serialized data will be saved. SplinePlus splinePlus The SplinePlus object whose data will be serialized. Set_Reference_Axis(SplinePlus, RefAxis_Enum) Sets the reference axis for a SplinePlus object. Declaration public static void Set_Reference_Axis(SplinePlus splinePlus, RefAxis_Enum axis) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object for which to set the reference axis. RefAxis_Enum axis The new reference axis to set. Set_Smoothness(SplinePlus, int) Sets the smoothness value for a SplinePlus object. Declaration public static void Set_Smoothness(SplinePlus splinePlus, int smoothness) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object for which to set the smoothness value. int smoothness The new smoothness value to set. SnapToGrid(SplinePlus, Camera) Snaps the nodes of a SplinePlus object to a grid based on the camera orientation. Declaration public static void SnapToGrid(SplinePlus splinePlus, Camera cam) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object whose nodes will be snapped to the grid. Camera cam The camera used to determine the grid orientation. Update(SplinePlus) Updates the SplinePlus object by updating each branch and invoking the SplinePlusUpdate event. Declaration public static void Update(SplinePlus splinePlus) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object to be updated. Weld(SplinePlus, float) Welds nodes in a SplinePlus object that are close to each other within a specified distance. Declaration public static void Weld(SplinePlus splinePlus, float weldDistance) Parameters Type Name Description SplinePlus splinePlus The SplinePlus object containing the nodes to be welded. float weldDistance"
  },
  "Index.html": {
    "href": "Index.html",
    "title": "SplinePlus Plugin Documentation | Spline Plus documentation",
    "keywords": "SplinePlus Plugin Documentation Welcome to the official documentation for SplinePlus, a powerful Unity 3D plugin for creating and manipulating multi-branch splines! SplinePlus offers an intuitive interface and a range of advanced features, allowing you to unleash your creativity and streamline your workflow. About SplinePlus SplinePlus is a Unity 3D plugin that provides a comprehensive solution for working with splines in your projects. With support for multi-branch splines and advanced animation followers, SplinePlus empowers you to create smooth and dynamic paths with ease. What's New in the Latest Release The latest release of SplinePlus focuses on enhancing performance, user-friendliness, and modularity, while also introducing a new event handling system. Here are the key improvements: Performance Enhancements: We've optimized algorithms and streamlined code to improve performance, ensuring smooth and responsive spline manipulation even in complex scenes. Enhanced User Interface: SplinePlus features a revamped user interface with improved organization and intuitive controls, making it easier than ever to create and edit splines. New Event Handling System: SplinePlus now offers a simplified way to handle events along spline branches. you can now define event points anywhere on the spline branches. When followers reach these points, the associated events are triggered automatically. This streamlined approach reduces complexity and enhances flexibility in event management. API Enhancements: We've expanded and refined the API to make SplinePlus more modular and interoperable with other Unity projects. Whether you're integrating SplinePlus into your own tools or extending its functionality, our API provides the flexibility you need. Tutorials Whether you're new to SplinePlus or a seasoned user looking to explore its advanced features, our tutorials provide step-by-step guidance to help you get the most out of the plugin. From basic spline creation to advanced animation techniques, our tutorials cover a wide range of topics to cater to users of all skill levels. Explore our tutorials: Getting Started with SplinePlus Creating Multi-Branch Splines Animating Objects Along Splines Advanced Techniques with Animation Followers API Documentation For developers looking to integrate SplinePlus into their Unity projects or extend its functionality, our API documentation provides comprehensive reference material covering all aspects of the plugin's API. Browse the API documentation: ProjectionAPI NodeAPI BranchAPI Get Started with SplinePlus Today! Ready to elevate your Unity projects with the power of splines? Download SplinePlus now and unleash your creativity! Download SplinePlus If you have any questions, feedback, or feature requests, don't hesitate to get in touch. We're here to help you make the most of SplinePlus and achieve your creative vision. Happy splining!"
  },
  "Introduction/DrawYourFirstSpline.html": {
    "href": "Introduction/DrawYourFirstSpline.html",
    "title": "Drawing Your First Spline | Spline Plus documentation",
    "keywords": "Drawing Your First Spline Follow these steps to draw your first spline using Spline Plus: Add Spline Plus FollowerGameObject to Scene: Navigate to Tools > Spline Plus. Select Spline Plus FollowerGameObject. Go to its inspector. Editor Mode Initialization: Since there are no nodes or branches yet, Spline Plus will automatically enable the editor mode to facilitate spline creation. - Click anywhere in the Scene View to add your first node. Add Another Branch: In the toolbar of the Spline Plus FollowerGameObject, navigate to Branch > Add. Adding Nodes to the New Branch: Click in the Scene View to add nodes for the newly created branch. Press Esc on your keyboard to exit edit mode and switch back to selection mode once you're done adding nodes. Fusing Nodes: To connect the selected node to another one in a different branch. Navigate to the Spline Plus toolbar, then Node > Fuse. Click the node you want to fuse with the selected node. A shared node will be created. You can check the debug area while selecting the shared node to view the shared node index in the selected branch, the connected branches key of the shared node, and the branch key of the currently selected branch. Switching Selection Between Connected Branches: A shortcut to switch selection between the branches connected to the shared node: Make sure you're selecting the shared node. Press Return on your keyboard. Follow these steps to create your first spline in Spline Plus. Experiment with different nodes and branches to achieve your desired spline shape and complexity."
  },
  "Introduction/GetStarted.html": {
    "href": "Introduction/GetStarted.html",
    "title": "Getting Started with Spline Plus | Spline Plus documentation",
    "keywords": "Getting Started with Spline Plus Once you've added the Spline Plus to your Unity project, you can access its various features and settings from the Inspector window. Exploring Spline Plus Features Accessing Spline Features Spline: The core of Spline Plus grants you access to a plethora of features, including snapping to grid, spline projection into meshes, spline nodes welding, and much more. Manipulating Branches and Nodes Branches: Under the \"Branch\" section, you can perform operations such as adding, removing, diffusing, and reversing the direction of branches. Nodes: In the \"Nodes\" section, you'll find various functionalities like adding, deleting, fusing, changing types, chamfering, breaking, adjusting speed scale, normals, and more. Applying Modifiers Animation Modifiers: These modifiers offer simple and group followers for spline-based animations. They come equipped with an advanced event system to facilitate interactive spline following, ideal for applications like train systems. Mesh Modifiers: Modifiers in this category offer procedural mesh generation capabilities. Please note that the mesh generation section is a separate package available for purchase on the Unity Asset Store. It provides options such as plane mesh, tube mesh, extrude mesh, and mesh deform to create procedural meshes along the spline. Important Mesh Modifiers are not directly integrated into Spline Plus. Instead, they are part of a separate package known as Spline Mesh Deform. This package encompasses both Spline Plus functionalities and additional mesh modifiers, providing users with a comprehensive set of tools for spline manipulation and mesh deformation. Unleash Your Creativity With Spline Plus, you have a powerful toolset at your disposal for creating intricate spline-based designs, animations, and interactive experiences in Unity. Dive in and explore the possibilities today! Ready to take your Unity projects to the next level? Start leveraging Spline Plus to bring your ideas to life!"
  },
  "Introduction/Instalation.html": {
    "href": "Introduction/Instalation.html",
    "title": "Getting Started with Spline Plus | Spline Plus documentation",
    "keywords": "Getting Started with Spline Plus Welcome to Spline Plus, a powerful Unity 3D plugin for creating and manipulating splines with ease. This guide will walk you through the installation process and getting started with your first spline. Installation To install Spline Plus, follow these simple steps: Package Manager: Install the [Spline Plus][https://assetstore.unity.com/packages/tools/animation/spline-plus-115853] package from the Unity Package Manager (UPM). Add to Project: Add all the content from the package to your Unity project. Once installed, you'll notice a new toolbar button labeled \"Tools\". Under the \"Tools\" menu, you'll find \"Spline Plus\". Clicking on this option will create a new Spline Plus game object in your scene."
  },
  "Introduction/Notions.html": {
    "href": "Introduction/Notions.html",
    "title": "Notions | Spline Plus documentation",
    "keywords": "Notions Node Nodes are fundamental elements that form a branch in Spline Plus. They are visually represented in the scene view by spherical markers. Tip Double-click on a node in your scene view to select it. Branch A branch is composed of nodes connected together. The selected branch is highlighted with a green color in the scene view. Tip Double-click on a branch in your scene view to select it. Shared Node A shared node is a special type of node that is shared by more than one branch. It is indicated by a purple sphere in your scene view."
  }
}